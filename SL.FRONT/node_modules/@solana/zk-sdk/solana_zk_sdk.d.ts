/* tslint:disable */
/* eslint-disable */
/**
 * Authenticated encryption nonce and ciphertext
 */
export class AeCiphertext {
  private constructor();
  free(): void;
}
export class AeKey {
  private constructor();
  free(): void;
  /**
   * Generates a random authenticated encryption key.
   *
   * This function is randomized. It internally samples a scalar element using `OsRng`.
   */
  static newRand(): AeKey;
  /**
   * Encrypts an amount under the authenticated encryption key.
   */
  encrypt(amount: bigint): AeCiphertext;
  decrypt(ciphertext: AeCiphertext): bigint | undefined;
}
/**
 * Decryption handle for Pedersen commitment.
 */
export class DecryptHandle {
  private constructor();
  free(): void;
}
/**
 * Ciphertext for the ElGamal encryption scheme.
 */
export class ElGamalCiphertext {
  private constructor();
  free(): void;
  commitment: PedersenCommitment;
  handle: DecryptHandle;
}
/**
 * A (twisted) ElGamal encryption keypair.
 *
 * The instances of the secret key are zeroized on drop.
 */
export class ElGamalKeypair {
  private constructor();
  free(): void;
  /**
   * Generates the public and secret keys for ElGamal encryption.
   *
   * This function is randomized. It internally samples a scalar element using `OsRng`.
   */
  static newRand(): ElGamalKeypair;
  pubkey_owned(): ElGamalPubkey;
}
/**
 * Public key for the ElGamal encryption scheme.
 */
export class ElGamalPubkey {
  private constructor();
  free(): void;
}
/**
 * wasm-bindgen version of the Instruction struct.
 * This duplication is required until https://github.com/rustwasm/wasm-bindgen/issues/3671
 * is fixed. This must not diverge from the regular non-wasm Instruction struct.
 */
export class Instruction {
  private constructor();
  free(): void;
}
export class Instructions {
  free(): void;
  constructor();
  push(instruction: Instruction): void;
}
/**
 * Pedersen commitment type.
 */
export class PedersenCommitment {
  private constructor();
  free(): void;
}
/**
 * The `AeCiphertext` type as a `Pod`.
 */
export class PodAeCiphertext {
  free(): void;
  constructor(value: any);
  toString(): string;
  equals(other: PodAeCiphertext): boolean;
  toBytes(): Uint8Array;
  static zeroed(): PodAeCiphertext;
  static encode(decoded: AeCiphertext): PodAeCiphertext;
  decode(): AeCiphertext;
}
/**
 * The `ElGamalCiphertext` type as a `Pod`.
 */
export class PodElGamalCiphertext {
  free(): void;
  constructor(value: any);
  toString(): string;
  equals(other: PodElGamalCiphertext): boolean;
  toBytes(): Uint8Array;
  static zeroed(): PodElGamalCiphertext;
  static encode(decoded: ElGamalCiphertext): PodElGamalCiphertext;
  decode(): ElGamalCiphertext;
}
/**
 * The `ElGamalPubkey` type as a `Pod`.
 */
export class PodElGamalPubkey {
  free(): void;
  constructor(value: any);
  toString(): string;
  equals(other: PodElGamalPubkey): boolean;
  toBytes(): Uint8Array;
  static zeroed(): PodElGamalPubkey;
  static encode(decoded: ElGamalPubkey): PodElGamalPubkey;
  decode(): ElGamalPubkey;
}
/**
 * The address of a [Solana account][acc].
 *
 * Some account addresses are [ed25519] public keys, with corresponding secret
 * keys that are managed off-chain. Often, though, account addresses do not
 * have corresponding secret keys &mdash; as with [_program derived
 * addresses_][pdas] &mdash; or the secret key is not relevant to the operation
 * of a program, and may have even been disposed of. As running Solana programs
 * can not safely create or manage secret keys, the full [`Keypair`] is not
 * defined in `solana-program` but in `solana-sdk`.
 *
 * [acc]: https://solana.com/docs/core/accounts
 * [ed25519]: https://ed25519.cr.yp.to/
 * [pdas]: https://solana.com/docs/core/cpi#program-derived-addresses
 * [`Keypair`]: https://docs.rs/solana-sdk/latest/solana_sdk/signer/keypair/struct.Keypair.html
 */
export class Pubkey {
  free(): void;
  /**
   * Create a new Pubkey object
   *
   * * `value` - optional public key as a base58 encoded string, `Uint8Array`, `[number]`
   */
  constructor(value: any);
  /**
   * Return the base58 string representation of the public key
   */
  toString(): string;
  /**
   * Checks if two `Pubkey`s are equal
   */
  equals(other: Pubkey): boolean;
  /**
   * Return the `Uint8Array` representation of the public key
   */
  toBytes(): Uint8Array;
}
