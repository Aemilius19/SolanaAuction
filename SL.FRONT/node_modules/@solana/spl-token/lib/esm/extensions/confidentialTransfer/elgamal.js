import { blob } from '@solana/buffer-layout';
import { encodeDecode } from '@solana/buffer-layout-utils';
import { PodElGamalPubkey, PodElGamalCiphertext, PodAeCiphertext } from '@solana/zk-sdk';
export const elgamalPublicKey = (property) => {
    const layout = blob(32, property);
    const { encode, decode } = encodeDecode(layout);
    const elgamalPublicKeyLayout = layout;
    elgamalPublicKeyLayout.decode = (buffer, offset) => {
        const src = decode(buffer, offset);
        return new PodElGamalPubkey(src);
    };
    elgamalPublicKeyLayout.encode = (elgamalPublicKey, buffer, offset) => {
        const src = elgamalPublicKey.toBytes();
        return encode(src, buffer, offset);
    };
    return elgamalPublicKeyLayout;
};
export const elgamalCiphertext = (property) => {
    const layout = blob(64, property);
    const { encode, decode } = encodeDecode(layout);
    const elgamalCiphertextLayout = layout;
    elgamalCiphertextLayout.decode = (buffer, offset) => {
        const src = decode(buffer, offset);
        return new PodElGamalCiphertext(src);
    };
    elgamalCiphertextLayout.encode = (elgamalCiphertext, buffer, offset) => {
        const src = elgamalCiphertext.toBytes();
        return encode(src, buffer, offset);
    };
    return elgamalCiphertextLayout;
};
export const aeCiphertext = (property) => {
    const layout = blob(36, property);
    const { encode, decode } = encodeDecode(layout);
    const aeCiphertextLayout = layout;
    aeCiphertextLayout.decode = (buffer, offset) => {
        const src = decode(buffer, offset);
        return new PodAeCiphertext(src);
    };
    aeCiphertextLayout.encode = (aeCiphertext, buffer, offset) => {
        const src = aeCiphertext.toBytes();
        return encode(src, buffer, offset);
    };
    return aeCiphertextLayout;
};
//# sourceMappingURL=elgamal.js.map