import { struct } from '@solana/buffer-layout';
import { publicKey, bool, u64 } from '@solana/buffer-layout-utils';
import { ExtensionType, getExtensionData } from '../extensionType.js';
import { elgamalPublicKey, elgamalCiphertext, aeCiphertext } from './elgamal.js';
/** Buffer layout for de/serializing a confidential transfer mint */
export const ConfidentialTransferMintLayout = struct([
    publicKey('confidentialTransferMintAuthority'),
    bool('autoApproveNewAccounts'),
    elgamalPublicKey('auditorElGamalPubkey'),
]);
export const CONFIDENTIAL_TRANSFER_MINT_SIZE = ConfidentialTransferMintLayout.span;
export function getConfidentialTransferMint(mint) {
    const extensionData = getExtensionData(ExtensionType.ConfidentialTransferMint, mint.tlvData);
    if (extensionData !== null) {
        return ConfidentialTransferMintLayout.decode(extensionData);
    }
    else {
        return null;
    }
}
/** Buffer layout for de/serializing a confidential transfer account */
export const ConfidentialTransferAccountLayout = struct([
    bool('approved'),
    elgamalPublicKey('elgamalPubkey'),
    elgamalCiphertext('pendingBalanceLo'),
    elgamalCiphertext('pendingBalanceLo'),
    elgamalCiphertext('availableBalance'),
    aeCiphertext('decryptableAvailableBalance'),
    bool('allowConfidentialCredits'),
    bool('allowNonConfidentialCredits'),
    u64('pendingBalanceCreditCounter'),
    u64('maximumPendingBalanceCreditCounter'),
    u64('expectedPendingBalanceCreditCounter'),
    u64('actualPendingBalanceCreditCounter'),
]);
export const CONFIDENTIAL_TRANSFER_ACCOUNT_SIZE = ConfidentialTransferAccountLayout.span;
export function getConfidentialTransferAccount(account) {
    const extensionData = getExtensionData(ExtensionType.ConfidentialTransferAccount, account.tlvData);
    if (extensionData !== null) {
        return ConfidentialTransferAccountLayout.decode(extensionData);
    }
    else {
        return null;
    }
}
//# sourceMappingURL=state.js.map