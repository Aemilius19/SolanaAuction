import { PublicKey, TransactionInstruction } from '@solana/web3.js';
import { TokenInstruction } from '../../instructions/types.js';
import { PodElGamalPubkey } from '@solana/zk-sdk';
export declare enum ConfidentialTransferInstruction {
    InitializeMint = 0,
    UpdateMint = 1
}
export interface InitializeMintData {
    instruction: TokenInstruction.ConfidentialTransferExtension;
    confidentialTransferInstruction: ConfidentialTransferInstruction.InitializeMint;
    confidentialTransferMintAuthority: PublicKey | null;
    autoApproveNewAccounts: boolean;
    auditorElGamalPubkey: PodElGamalPubkey | null;
}
export declare const initializeMintData: import("@solana/buffer-layout").Structure<InitializeMintData>;
/**
 * Construct a ConfidentialTransferInitializeMint instruction
 *
 * @param mint                              Token mint account
 * @param confidentialTransferMintAuthority Authority that can update confidential transfer mint
 * @param autoApproveNewAccounts            Auto-approve account policy
 * @param auditorElGamalPubkey              Optional auditor ElGamal public key
 * @param programId                         SPL Token program account
 *
 * @return Instruction to add to a transaction
 */
export declare function createConfidentialTransferInitializeMintInstruction(mint: PublicKey, confidentialTransferMintAuthority: PublicKey | null, autoApproveNewAccounts: boolean, auditorElGamalPubkey: PodElGamalPubkey | null, programId?: PublicKey): TransactionInstruction;
export interface UpdateMintData {
    instruction: TokenInstruction.ConfidentialTransferExtension;
    confidentialTransferInstruction: ConfidentialTransferInstruction.UpdateMint;
    autoApproveNewAccounts: boolean;
    auditorElGamalPubkey: PodElGamalPubkey | null;
}
export declare const updateMintData: import("@solana/buffer-layout").Structure<UpdateMintData>;
/**
 * Construct an UpdateMint instruction
 *
 * @param mint                              Token mint account
 * @param confidentialTransferMintAuthority Authority that can update confidential transfer mint
 * @param autoApproveNewAccounts            New auto-approve account policy
 * @param auditorElGamalPubkey              New auditor ElGamal public key
 * @param programId                         SPL Token program account
 *
 * @return Instruction to add to a transaction
 */
export declare function createConfidentialTransferUpdateMintInstruction(mint: PublicKey, confidentialTransferMintAuthority: PublicKey, autoApproveNewAccounts: boolean, auditorElGamalPubkey: PodElGamalPubkey | null, programId?: PublicKey): TransactionInstruction;
//# sourceMappingURL=instructions.d.ts.map