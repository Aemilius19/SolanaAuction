import type { PublicKey } from '@solana/web3.js';
import type { Mint } from '../../state/mint.js';
import type { Account } from '../../state/account.js';
import type { PodElGamalPubkey, PodElGamalCiphertext, PodAeCiphertext } from '@solana/zk-sdk';
/** ConfidentialTransferMint as stored by the program */
export interface ConfidentialTransferMint {
    confidentialTransferMintAuthority: PublicKey;
    autoApproveNewAccounts: boolean;
    auditorElGamalPubkey: PodElGamalPubkey;
}
/** Buffer layout for de/serializing a confidential transfer mint */
export declare const ConfidentialTransferMintLayout: import("@solana/buffer-layout").Structure<ConfidentialTransferMint>;
export declare const CONFIDENTIAL_TRANSFER_MINT_SIZE: number;
export declare function getConfidentialTransferMint(mint: Mint): ConfidentialTransferMint | null;
/** ConfidentialTransferAccount as stored by the program */
export interface ConfidentialTransferAccount {
    approved: boolean;
    elgamalPubkey: PodElGamalPubkey;
    pendingBalanceLo: PodElGamalCiphertext;
    pendingBalanceHi: PodElGamalCiphertext;
    availableBalance: PodElGamalCiphertext;
    decryptableAvailableBalance: PodAeCiphertext;
    allowConfidentialCredits: boolean;
    allowNonConfidentialCredits: boolean;
    pendingBalanceCreditCounter: bigint;
    maximumPendingBalanceCreditCounter: bigint;
    expectedPendingBalanceCreditCounter: bigint;
    actualPendingBalanceCreditCounter: bigint;
}
/** Buffer layout for de/serializing a confidential transfer account */
export declare const ConfidentialTransferAccountLayout: import("@solana/buffer-layout").Structure<ConfidentialTransferAccount>;
export declare const CONFIDENTIAL_TRANSFER_ACCOUNT_SIZE: number;
export declare function getConfidentialTransferAccount(account: Account): ConfidentialTransferAccount | null;
//# sourceMappingURL=state.d.ts.map