"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.aeCiphertext = exports.elgamalCiphertext = exports.elgamalPublicKey = void 0;
const buffer_layout_1 = require("@solana/buffer-layout");
const buffer_layout_utils_1 = require("@solana/buffer-layout-utils");
const zk_sdk_1 = require("@solana/zk-sdk");
const elgamalPublicKey = (property) => {
    const layout = (0, buffer_layout_1.blob)(32, property);
    const { encode, decode } = (0, buffer_layout_utils_1.encodeDecode)(layout);
    const elgamalPublicKeyLayout = layout;
    elgamalPublicKeyLayout.decode = (buffer, offset) => {
        const src = decode(buffer, offset);
        return new zk_sdk_1.PodElGamalPubkey(src);
    };
    elgamalPublicKeyLayout.encode = (elgamalPublicKey, buffer, offset) => {
        const src = elgamalPublicKey.toBytes();
        return encode(src, buffer, offset);
    };
    return elgamalPublicKeyLayout;
};
exports.elgamalPublicKey = elgamalPublicKey;
const elgamalCiphertext = (property) => {
    const layout = (0, buffer_layout_1.blob)(64, property);
    const { encode, decode } = (0, buffer_layout_utils_1.encodeDecode)(layout);
    const elgamalCiphertextLayout = layout;
    elgamalCiphertextLayout.decode = (buffer, offset) => {
        const src = decode(buffer, offset);
        return new zk_sdk_1.PodElGamalCiphertext(src);
    };
    elgamalCiphertextLayout.encode = (elgamalCiphertext, buffer, offset) => {
        const src = elgamalCiphertext.toBytes();
        return encode(src, buffer, offset);
    };
    return elgamalCiphertextLayout;
};
exports.elgamalCiphertext = elgamalCiphertext;
const aeCiphertext = (property) => {
    const layout = (0, buffer_layout_1.blob)(36, property);
    const { encode, decode } = (0, buffer_layout_utils_1.encodeDecode)(layout);
    const aeCiphertextLayout = layout;
    aeCiphertextLayout.decode = (buffer, offset) => {
        const src = decode(buffer, offset);
        return new zk_sdk_1.PodAeCiphertext(src);
    };
    aeCiphertextLayout.encode = (aeCiphertext, buffer, offset) => {
        const src = aeCiphertext.toBytes();
        return encode(src, buffer, offset);
    };
    return aeCiphertextLayout;
};
exports.aeCiphertext = aeCiphertext;
//# sourceMappingURL=elgamal.js.map