"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateMint = updateMint;
const web3_js_1 = require("@solana/web3.js");
const constants_js_1 = require("../../constants.js");
const instructions_js_1 = require("./instructions.js");
/**
 * Update confidential transfer mint
 *
 * @param connection                Connection to use
 * @param payer                     Payer of the transaction fees
 * @param mint                      The token mint
 * @param autoApproveNewAccounts    New auto-approve account policy
 * @param auditorElGamalPubkey      New Auditor ElGamal public key
 * @param authority                 Confidential transfer authority of the mint
 * @param confirmOptions            Options for confirming the transaction
 * @param programId                 SPL Token program account
 *
 * @return Signature of the confirmed transaction
 */
function updateMint(connection_1, payer_1, mint_1, autoApproveNewAccounts_1, auditorElGamalPubkey_1, authority_1, confirmOptions_1) {
    return __awaiter(this, arguments, void 0, function* (connection, payer, mint, autoApproveNewAccounts, auditorElGamalPubkey, authority, confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createConfidentialTransferUpdateMintInstruction)(mint, authority.publicKey, autoApproveNewAccounts, auditorElGamalPubkey, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, authority], confirmOptions);
    });
}
//# sourceMappingURL=actions.js.map