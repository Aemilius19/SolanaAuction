"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateMintData = exports.initializeMintData = exports.ConfidentialTransferInstruction = void 0;
exports.createConfidentialTransferInitializeMintInstruction = createConfidentialTransferInitializeMintInstruction;
exports.createConfidentialTransferUpdateMintInstruction = createConfidentialTransferUpdateMintInstruction;
const buffer_layout_1 = require("@solana/buffer-layout");
const buffer_layout_utils_1 = require("@solana/buffer-layout-utils");
const web3_js_1 = require("@solana/web3.js");
const constants_js_1 = require("../../constants.js");
const errors_js_1 = require("../../errors.js");
const types_js_1 = require("../../instructions/types.js");
const elgamal_js_1 = require("./elgamal.js");
const zk_sdk_1 = require("@solana/zk-sdk");
var ConfidentialTransferInstruction;
(function (ConfidentialTransferInstruction) {
    ConfidentialTransferInstruction[ConfidentialTransferInstruction["InitializeMint"] = 0] = "InitializeMint";
    ConfidentialTransferInstruction[ConfidentialTransferInstruction["UpdateMint"] = 1] = "UpdateMint";
})(ConfidentialTransferInstruction || (exports.ConfidentialTransferInstruction = ConfidentialTransferInstruction = {}));
exports.initializeMintData = (0, buffer_layout_1.struct)([
    (0, buffer_layout_1.u8)('instruction'),
    (0, buffer_layout_1.u8)('confidentialTransferInstruction'),
    (0, buffer_layout_utils_1.publicKey)('confidentialTransferMintAuthority'),
    (0, buffer_layout_utils_1.bool)('autoApproveNewAccounts'),
    (0, elgamal_js_1.elgamalPublicKey)('auditorElGamalPubkey'),
]);
/**
 * Construct a ConfidentialTransferInitializeMint instruction
 *
 * @param mint                              Token mint account
 * @param confidentialTransferMintAuthority Authority that can update confidential transfer mint
 * @param autoApproveNewAccounts            Auto-approve account policy
 * @param auditorElGamalPubkey              Optional auditor ElGamal public key
 * @param programId                         SPL Token program account
 *
 * @return Instruction to add to a transaction
 */
function createConfidentialTransferInitializeMintInstruction(mint, confidentialTransferMintAuthority, autoApproveNewAccounts, auditorElGamalPubkey, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
    if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
    }
    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];
    const data = Buffer.alloc(exports.initializeMintData.span);
    exports.initializeMintData.encode({
        instruction: types_js_1.TokenInstruction.ConfidentialTransferExtension,
        confidentialTransferInstruction: ConfidentialTransferInstruction.InitializeMint,
        confidentialTransferMintAuthority: confidentialTransferMintAuthority !== null && confidentialTransferMintAuthority !== void 0 ? confidentialTransferMintAuthority : web3_js_1.PublicKey.default,
        autoApproveNewAccounts: autoApproveNewAccounts,
        auditorElGamalPubkey: auditorElGamalPubkey !== null && auditorElGamalPubkey !== void 0 ? auditorElGamalPubkey : zk_sdk_1.PodElGamalPubkey.zeroed(),
    }, data);
    return new web3_js_1.TransactionInstruction({ keys, programId, data });
}
exports.updateMintData = (0, buffer_layout_1.struct)([
    (0, buffer_layout_1.u8)('instruction'),
    (0, buffer_layout_1.u8)('confidentialTransferInstruction'),
    (0, buffer_layout_utils_1.bool)('autoApproveNewAccounts'),
    (0, elgamal_js_1.elgamalPublicKey)('auditorElGamalPubkey'),
]);
/**
 * Construct an UpdateMint instruction
 *
 * @param mint                              Token mint account
 * @param confidentialTransferMintAuthority Authority that can update confidential transfer mint
 * @param autoApproveNewAccounts            New auto-approve account policy
 * @param auditorElGamalPubkey              New auditor ElGamal public key
 * @param programId                         SPL Token program account
 *
 * @return Instruction to add to a transaction
 */
function createConfidentialTransferUpdateMintInstruction(mint, confidentialTransferMintAuthority, autoApproveNewAccounts, auditorElGamalPubkey, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
    if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
    }
    const keys = [
        { pubkey: mint, isSigner: false, isWritable: true },
        { pubkey: confidentialTransferMintAuthority, isSigner: true, isWritable: false },
    ];
    const data = Buffer.alloc(exports.updateMintData.span);
    exports.updateMintData.encode({
        instruction: types_js_1.TokenInstruction.ConfidentialTransferExtension,
        confidentialTransferInstruction: ConfidentialTransferInstruction.UpdateMint,
        autoApproveNewAccounts: autoApproveNewAccounts,
        auditorElGamalPubkey: auditorElGamalPubkey !== null && auditorElGamalPubkey !== void 0 ? auditorElGamalPubkey : zk_sdk_1.PodElGamalPubkey.zeroed(),
    }, data);
    return new web3_js_1.TransactionInstruction({ keys, programId, data });
}
//# sourceMappingURL=instructions.js.map