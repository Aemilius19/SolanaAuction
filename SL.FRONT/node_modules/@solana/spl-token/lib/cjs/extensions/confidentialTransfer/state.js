"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CONFIDENTIAL_TRANSFER_ACCOUNT_SIZE = exports.ConfidentialTransferAccountLayout = exports.CONFIDENTIAL_TRANSFER_MINT_SIZE = exports.ConfidentialTransferMintLayout = void 0;
exports.getConfidentialTransferMint = getConfidentialTransferMint;
exports.getConfidentialTransferAccount = getConfidentialTransferAccount;
const buffer_layout_1 = require("@solana/buffer-layout");
const buffer_layout_utils_1 = require("@solana/buffer-layout-utils");
const extensionType_js_1 = require("../extensionType.js");
const elgamal_js_1 = require("./elgamal.js");
/** Buffer layout for de/serializing a confidential transfer mint */
exports.ConfidentialTransferMintLayout = (0, buffer_layout_1.struct)([
    (0, buffer_layout_utils_1.publicKey)('confidentialTransferMintAuthority'),
    (0, buffer_layout_utils_1.bool)('autoApproveNewAccounts'),
    (0, elgamal_js_1.elgamalPublicKey)('auditorElGamalPubkey'),
]);
exports.CONFIDENTIAL_TRANSFER_MINT_SIZE = exports.ConfidentialTransferMintLayout.span;
function getConfidentialTransferMint(mint) {
    const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.ConfidentialTransferMint, mint.tlvData);
    if (extensionData !== null) {
        return exports.ConfidentialTransferMintLayout.decode(extensionData);
    }
    else {
        return null;
    }
}
/** Buffer layout for de/serializing a confidential transfer account */
exports.ConfidentialTransferAccountLayout = (0, buffer_layout_1.struct)([
    (0, buffer_layout_utils_1.bool)('approved'),
    (0, elgamal_js_1.elgamalPublicKey)('elgamalPubkey'),
    (0, elgamal_js_1.elgamalCiphertext)('pendingBalanceLo'),
    (0, elgamal_js_1.elgamalCiphertext)('pendingBalanceLo'),
    (0, elgamal_js_1.elgamalCiphertext)('availableBalance'),
    (0, elgamal_js_1.aeCiphertext)('decryptableAvailableBalance'),
    (0, buffer_layout_utils_1.bool)('allowConfidentialCredits'),
    (0, buffer_layout_utils_1.bool)('allowNonConfidentialCredits'),
    (0, buffer_layout_utils_1.u64)('pendingBalanceCreditCounter'),
    (0, buffer_layout_utils_1.u64)('maximumPendingBalanceCreditCounter'),
    (0, buffer_layout_utils_1.u64)('expectedPendingBalanceCreditCounter'),
    (0, buffer_layout_utils_1.u64)('actualPendingBalanceCreditCounter'),
]);
exports.CONFIDENTIAL_TRANSFER_ACCOUNT_SIZE = exports.ConfidentialTransferAccountLayout.span;
function getConfidentialTransferAccount(account) {
    const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.ConfidentialTransferAccount, account.tlvData);
    if (extensionData !== null) {
        return exports.ConfidentialTransferAccountLayout.decode(extensionData);
    }
    else {
        return null;
    }
}
//# sourceMappingURL=state.js.map